1.
Sample JSON query:
a. Payment
{
	"type": "PaymentType1",
    "amount": 1,
    "currency": "EUR",
    "debtorIban": "debtorIban",
    "creditorIban": "creditorIban",
    "details": "details"
}
b. Cancellation
{
	"uuid":"803f46f1-8439-45c4-a36c-5eabc02463a0"
}
c. Query by uuid
{
    "uuid":"803f46f1-8439-45c4-a36c-5eabc02463a0"
}

d. Query all with optional filters. Sample query returns uuids of payments that are not cancelled and whose amount is [100, 200]
{
	"largerThanAmountFilter":100
	"smallerThanAmountFilter":200
}

2.
Current approach: deserialization of JSON messages into subclasses with Jackson
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = PaymentType1.class),
        @JsonSubTypes.Type(value = PaymentType2.class),
        @JsonSubTypes.Type(value = PaymentType3.class),
})
Plus: single target URL. Minus: type checking

Alternative: separate target URLs for each payment type
Plus: no type checking, separate URLs on client side. Minus: duplicated code (saving payment has the same steps regardless of type)

3.
class Payment annotations
@MappedSuperclass
@Entity
can't be used at the same time. MappedSuperclass results in the creation of separate tables for each subclass. Entity creates one table with all fields gathered from subclasses

4.
Security:
Each client should be authenticated. Only authenticated clients can use services. Client can cancel only their own payments. Client can query only their own payments.

5.
Request validation in controller (@Valid). Occasionally works, often throws no errors for invalid requests. Don't know why.

